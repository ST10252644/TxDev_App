name: Android CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.gitignore'
  workflow_dispatch: # Allow manual triggering

# Set permissions for the workflow
permissions:
  contents: read
  actions: read
  checks: write

env:
  # Use specific versions to ensure reproducibility
  GRADLE_VERSION: '8.10.2'
  ANDROID_COMPILE_SDK: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'
  ANDROID_SDK_TOOLS: '11076708'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Prevent hanging builds
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history for proper versioning

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
          cmake: '3.22.1'
          ndk: '25.2.9519653'

      - name: Accept Android SDK Licenses
        run: |
          echo "Accepting Android SDK licenses..."
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;${{ env.ANDROID_BUILD_TOOLS }}"

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Check Project Structure
        run: |
          echo "=== Project Structure ==="
          ls -la
          echo "=== Gradle Files ==="
          find . -name "*.gradle*" -type f
          echo "=== Android Manifest ==="
          find . -name "AndroidManifest.xml" -type f

      - name: Gradle Dependencies Check
        run: ./gradlew dependencies --configuration debugRuntimeClasspath

      - name: Clean Project
        run: ./gradlew clean

      - name: Build Debug APK
        run: |
          echo "Building debug APK..."
          ./gradlew assembleDebug --stacktrace --info
        env:
          GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"

      - name: Run Unit Tests
        run: |
          echo "Running unit tests..."
          ./gradlew testDebugUnitTest --stacktrace
        continue-on-error: false

      - name: Run Android Lint
        run: |
          echo "Running Android Lint..."
          ./gradlew lintDebug --stacktrace
        continue-on-error: true

      - name: Build Release APK
        run: |
          echo "Building release APK..."
          ./gradlew assembleRelease --stacktrace
        env:
          GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"

      - name: List Output Files
        run: |
          echo "=== Debug APK Files ==="
          find . -name "*.apk" -path "*/debug/*" -type f
          echo "=== Release APK Files ==="
          find . -name "*.apk" -path "*/release/*" -type f
          echo "=== All Build Outputs ==="
          find . -path "*/build/outputs/*" -type f

      - name: Upload Debug APK
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ github.run_number }}
          path: |
            **/build/outputs/apk/debug/*.apk
          retention-days: 7

      - name: Upload Release APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-${{ github.run_number }}
          path: |
            **/build/outputs/apk/release/*.apk
          retention-days: 30

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            **/build/test-results/**/*.xml
            **/build/reports/**/*
          retention-days: 7

      - name: Upload Lint Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports-${{ github.run_number }}
          path: |
            **/build/reports/lint-results-*.html
            **/build/reports/lint-results-*.xml
          retention-days: 7

  # Optional: Separate job for running instrumented tests if needed
  instrumented-tests:
    name: Instrumented Tests
    runs-on: ubuntu-latest
    if: false # Set to true if you have instrumented tests
    timeout-minutes: 30
    
    strategy:
      matrix:
        api-level: [28, 29, 30]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Run Instrumented Tests
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: ./gradlew connectedAndroidTest --stacktrace

  # Optional: Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Security Scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'security-scan-results.sarif'
        continue-on-error: true

  # Optional: Deployment job for releases
  deploy:
    name: Deploy to Play Store
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && false # Set to true when ready
    needs: [build, instrumented-tests]
    environment: production
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: release-apk-${{ github.run_number }}

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.yourcompany.yourapp
          releaseFiles: '**/*.apk'
          track: internal # or 'alpha', 'beta', 'production'
